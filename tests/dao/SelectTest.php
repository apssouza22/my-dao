<?php

namespace dao;
require_once dirname(__FILE__) . '/../../dao/DB.php';
require_once dirname(__FILE__) . '/../../dao/Filter.php';
require_once dirname(__FILE__) . '/../../dao/Select.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-17 at 20:39:55.
 */
class SelectTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Select
	 */
	protected $object;
	private $db;


	public static function setUpBeforeClass()
	{
		$db = new \PDO("mysql:host=localhost;dbname=testedao", "root", "");
		$db->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
		$db->query('DROP TABLE IF EXISTS usuario;');
		$db->query("CREATE TABLE `usuario` (
			  `id` int(11) NOT NULL AUTO_INCREMENT,
			  `nome` varchar(45) DEFAULT NULL,
			  `email` varchar(45) DEFAULT NULL,
			  `datacadastro` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
			  PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=latin1");
		
		$db->query('DROP TABLE IF EXISTS item;');
		$db->query("CREATE TABLE `item` (
					  `id` int(11) NOT NULL AUTO_INCREMENT,
					  `idproduto` int(11) DEFAULT NULL,
					  `idusuario` int(11) DEFAULT NULL,
					  PRIMARY KEY (`id`)
					) ENGINE=InnoDB DEFAULT CHARSET=latin1");
		
		$db->query('DROP TABLE IF EXISTS produto;');
		$db->query("CREATE TABLE `produto` (
					  `id` int(11) NOT NULL AUTO_INCREMENT,
					  `nome` varchar(45) DEFAULT NULL,
					  `preco` decimal(10,2) DEFAULT NULL,
					  PRIMARY KEY (`id`)
					) ENGINE=InnoDB DEFAULT CHARSET=latin1");
		
		$db->query("INSERT INTO `testedao`.`usuario`(`nome`,`email`)
					VALUES('Alexsandro Souza','apssouza22@gmail.com');");
		$db->query("INSERT INTO `testedao`.`usuario`(`nome`,`email`)
					VALUES('Marcia Souza','marcia@gmail.com');");
		
		$db->query("INSERT INTO `testedao`.`produto`(`nome`,`preco`)
					VALUES('carro',20000.00);");
		
		$db->query("INSERT INTO `testedao`.`item`(`idproduto`,`idusuario`)
					VALUES(1,1);");
		$db->query("INSERT INTO `testedao`.`item`(`idproduto`,`idusuario`)
					VALUES(1,3);");
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->db = new \PDO("mysql:host=localhost;dbname=testedao", "root", "");
		$this->object = new \dao\Select($this->db, '*', 'stdClass');
	}

	public function testFrom()
	{
		$this->assertInstanceOf('\dao\Select', $this->object->from('usuario'));
	}

	/**
	 * @covers dao\Select::leftJoin
	 * @todo   Implement testLeftJoin().
	 */
	public function testLeftJoin()
	{
		$left = $this->object->from('usuario u')
				->leftJoin('item i ')->on(array('i.idusuario' => 'u.id'))
				->fetchAllObject();
		$this->assertEquals(2, count($left));
	}

	
	public function testRightJoin()
	{
		$right = $this->object->from('usuario u')
				->rightJoin('item i')->on('i.idusuario = u.id')
				->fetchAllObject();
		$this->assertEquals(2, count($right));
	}

	
	public function testInnerJoin()
	{
		$inner = $this->object->from('usuario u')
				->innerJoin('item i ON i.idusuario = u.id')
				->fetchAllObject();
		$this->assertEquals(1, count($inner));
	}

	/**
	 * @covers dao\Select::setFilter
	 * @todo   Implement testSetFilter().
	 */
	public function testSetFilter()
	{
		$this->assertInstanceOf('\dao\Select', $this->object->setFilter(new Filter));
	}

	
	public function testGroupBy()
	{
		$this->assertInstanceOf('\dao\Select', $this->object->groupBy('id'));
	}

	/**
	 * @covers dao\Select::orderBy
	 * @todo   Implement testOrderBy().
	 */
	public function testOrderBy()
	{
		$this->assertInstanceOf('\dao\Select', $this->object->orderBy('id'));
	}

	
	public function testLimit()
	{
		$this->object->from('usuario');
		$q = $this->object->limit(1)->fetchAll();
		$this->assertEquals(1, count($q));
	}

	public function testFetchAll()
	{
		$this->object->from('usuario');
		$this->assertEquals(2,  count($this->object->fetchAll()));
	}

	
	public function testFetchObject()
	{
		$this->object->from('usuario');
		$obj = $this->object->fetchObject();
		$this->assertInstanceOf('stdClass', $obj);
	}

	public function testFetchOne()
	{
		$this->object->from('usuario');
//		var_dump($this->object->fetchOne());
//		$this->assertEquals(1,  count($this->object->fetchOne()));
	}
	
	public function testFetchAllObject()
	{
		$this->object->from('usuario');
		$obj = $this->object->fetchAllObject();
		$this->assertInstanceOf('stdClass', $obj[0]);
	}

	public function testGetQuery()
	{
		$query = $this->object->from('usuario')
				->orderBy('id')
				->groupBy('id')
				->limit(1)
				->getQuery();
		$this->assertEquals('SELECT *   FROM usuario   WHERE 1 GROUP BY id ORDER BY id LIMIT 0 , 1', $query);
	}

}
